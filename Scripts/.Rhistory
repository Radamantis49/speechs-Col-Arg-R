filter(autor == "Petro") %>%
filter(row_number()<=20) %>%
ggplot(aes(n, reorder(bigram, n))) +
geom_col(show.legend = F, fill = "Yellow2", colour = "Dark Grey") +
theme_minimal() +
labs(title= "Frecuencia de bigramas Petro", y= "Bigrama", x="Frecuencia")
b2 <- freq_bigrams %>%
group_by(autor) %>%
filter(autor == "Milei") %>%
filter(row_number()<=20) %>%
ggplot(aes(n, reorder(bigram, n))) +
geom_col(show.legend = F, fill = "Orange", colour = "Dark Grey") +
theme_minimal() +
labs(title= "Frecuencia de bigramas Milei", y= "Bigrama", x="Frecuencia")
b3 <- freq_bigrams %>%
group_by(autor) %>%
filter(autor == "Macri") %>%
filter(row_number()<=20) %>%
ggplot(aes(n, reorder(bigram, n))) +
geom_col(show.legend = F, fill = "Light Blue", colour = "Dark Grey") +
theme_minimal() +
labs(title= "Frecuencia de bigramas Macri", y= "Bigrama", x="Frecuencia")
b4 <- freq_bigrams %>%
group_by(autor) %>%
filter(autor == "Fernandez") %>%
filter(row_number()<=20) %>%
ggplot(aes(n, reorder(bigram, n))) +
geom_col(show.legend = F, fill = "Red2", colour = "Dark Grey") +
theme_minimal() +
labs(title= "Frecuencia de bigramas Fernandez", y= "Bigrama", x="Frecuencia")
b5 <- freq_bigrams %>%
group_by(autor) %>%
filter(autor == "Cristina") %>%
filter(row_number()<=20) %>%
ggplot(aes(n, reorder(bigram, n))) +
geom_col(show.legend = F, fill = "Purple2", colour = "Dark Grey") +
theme_minimal() +
labs(title= "Frecuencia de bigramas Cristina", y= "Bigrama", x="Frecuencia")
b6 <- freq_bigrams %>%
group_by(autor) %>%
filter(autor == "Santos") %>%
filter(row_number()<=20) %>%
ggplot(aes(n, reorder(bigram, n))) +
geom_col(show.legend = F, fill = "Green2", colour = "Dark Grey") +
theme_minimal() +
labs(title= "Frecuencia de bigramas Santos", y= "Bigrama", x="Frecuencia")
grid.arrange(b1, b2, b3, b4, b5, b6, ncol = 2)
tokens <- df_final %>%
#mutate(doc_id = row_number()) %>%   # ID único por discurso
unnest_tokens(word, texto) %>%
# quitar stopwords en español
filter(!word %in% sw) %>%
# quitar números y palabras muy cortas
filter(!str_detect(word, "^[0-9]+$")) %>%
filter(str_length(word) > 2)
# 3. Construir Document-Term Matrix
dtm <- tokens %>%
count(autor, word) %>%
cast_dtm(document = autor, term = word, value = n)
# 4. Modelo LDA (ejemplo con 4 tópicos, ajusta k según necesidad)
set.seed(123)
lda_model <- LDA(dtm, k = 4, control = list(seed = 123))
# 5. Palabras más representativas por tópico
topics <- tidy(lda_model, matrix = "beta")
top_terms <- topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
# 6. Graficar
ggplot(top_terms, aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_x_reordered() +
coord_flip() +
labs(title = "Términos más representativos por tópico en discursos de CFK (2007-2015)",
x = "Término", y = "Probabilidad (β)")
ggplot(top_terms, aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_x_reordered() +
coord_flip() +
labs(title = "Términos más representativos por tópico en discursos de presidentes de Argentina y Colombia",
x = "Término", y = "Probabilidad (β)")
# 6. Graficar
ggplot(top_terms, aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_x_reordered() +
coord_flip() +
labs(title = "Términos más representativos por tema. Presidentes de Argentina y Colombia",
x = "Término", y = "Probabilidad (β)")
lda_model <- LDA(dtm, k = 2, control = list(seed = 123))
lda_model <- LDA(dtm, k = 2, control = list(seed = 123))
topics <- tidy(lda_model, matrix = "beta")
top_terms <- topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
# 6. Graficar
ggplot(top_terms, aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_x_reordered() +
coord_flip() +
labs(title = "Términos más representativos por tema. Presidentes de Argentina y Colombia",
x = "Término", y = "Probabilidad (β)")
topics <- tidy(lda_model, matrix = "beta")
top_terms <- topics %>%
group_by(topic) %>%
slice_max(beta, n = 20) %>%
ungroup() %>%
arrange(topic, -beta)
# 6. Graficar
ggplot(top_terms, aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_x_reordered() +
coord_flip() +
labs(title = "Términos más representativos por tema. Presidentes de Argentina y Colombia",
x = "Término", y = "Probabilidad (β)")
lda_model <- LDA(dtm, k = 6, control = list(seed = 123))
topics <- tidy(lda_model, matrix = "beta")
top_terms <- topics %>%
group_by(topic) %>%
slice_max(beta, n = 20) %>%
ungroup() %>%
arrange(topic, -beta)
# 6. Graficar
ggplot(top_terms, aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_x_reordered() +
coord_flip() +
labs(title = "Términos más representativos por tema. Presidentes de Argentina y Colombia",
x = "Término", y = "Probabilidad (β)")
discursos_tf_idf_bigram <- freq_bigrams %>%
bind_tf_idf(palabra, autor, n)
discursos_tf_idf_bigram <- freq_bigrams %>%
bind_tf_idf(palabra, autor, n)
View(freq_bigrams)
discursos_tf_idf_bigram <- freq_bigrams %>%
bind_tf_idf(bigram, autor, n)
discursos_tf_idf_bigram %>%
select(-total) %>%
arrange(desc(tf_idf))
discursos_tf_idf_bigram %>%
group_by(autor) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
ggplot(aes(tf_idf, fct_reorder(palabra, tf_idf), fill = autor)) +
geom_col(show.legend = FALSE) +
facet_wrap(~autor, ncol = 2, scales = "free") +
labs(x = "tf-idf", y = NULL)
discursos_tf_idf_bigram %>%
group_by(autor) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
ggplot(aes(tf_idf, fct_reorder(bigram, tf_idf), fill = autor)) +
geom_col(show.legend = FALSE) +
facet_wrap(~autor, ncol = 2, scales = "free") +
labs(x = "tf-idf", y = NULL)
grafica1 <- freq_bigrams %>%
filter(n > 100) %>%
graph_from_data_frame()
install.packages("ggraph")
library(ggraph)
grafica1 <- freq_bigrams %>%
filter(n > 100) %>%
graph_from_data_frame()
install.packages("igraph")
library(igraph)
install.packages("igraph")
library(igraph)
grafica1 <- freq_bigrams %>%
filter(n > 100) %>%
graph_from_data_frame()
set.seed(2016)
ggraph(grafica1, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1, size = 3)
grafica_Petro <- freq_bigrams %>%
filter(n > 100) %>%
filter(autor = "Petro") %>%
graph_from_data_frame(directed = F)
grafica_Petro <- freq_bigrams %>%
filter(n > 100) %>%
filter(autor == "Petro") %>%
graph_from_data_frame(directed = F)
grafica_Petro <- igraph::simplify(grafica_Petro)
# crea componente conexa
V(grafica_Petro)$cluster <- clusters(graph = grafica_Petro)$membership
gcc <- induced_subgraph(graph = grafica_Petro, vids = which(V(grafica_Petro)$cluster == which.max(clusters(graph = grafica_Petro)$csize)))
set.seed(123)
plot(gcc, layout = layout_with_fr,
vertex.color = adjustcolor('darkolivegreen4', 0.1),
vertex.frame.color = 'darkolivegreen4',
vertex.size = 2 * strength(gcc),
vertex.label = NA)
grafica_Petro <- freq_bigrams %>%
filter(n > 100) %>%
#filter(autor == "Petro") %>%
graph_from_data_frame(directed = F)
grafica_Petro <- igraph::simplify(grafica_Petro)
# crea componente conexa
V(grafica_Petro)$cluster <- clusters(graph = grafica_Petro)$membership
gcc <- induced_subgraph(graph = grafica_Petro, vids = which(V(grafica_Petro)$cluster == which.max(clusters(graph = grafica_Petro)$csize)))
set.seed(123)
plot(gcc, layout = layout_with_fr,
vertex.color = adjustcolor('darkolivegreen4', 0.1),
vertex.frame.color = 'darkolivegreen4',
vertex.size = 2 * strength(gcc),
vertex.label = NA)
grafica_Petro <- freq_bigrams %>%
filter(n > 100) %>%
filter(autor == "Petro") %>%
graph_from_data_frame(directed = F)
grafica_Petro <- igraph::simplify(grafica_Petro)
# crea componente conexa
#V(grafica_Petro)$cluster <- clusters(graph = grafica_Petro)$membership
#gcc <- induced_subgraph(graph = grafica_Petro, vids = which(V(grafica_Petro)$cluster == which.max(clusters(graph = grafica_Petro)$csize)))
set.seed(123)
#plot(gcc, layout = layout_with_fr,
#     vertex.color = adjustcolor('darkolivegreen4', 0.1),
#     vertex.frame.color = 'darkolivegreen4',
#     vertex.size = 2 * strength(gcc),
#     vertex.label = NA)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1, size = 3)
grafica_Petro <- freq_bigrams %>%
filter(n > 100) %>%
#filter(autor == "Petro") %>%
graph_from_data_frame(directed = F)
grafica_Petro <- igraph::simplify(grafica_Petro)
# crea componente conexa
V(grafica_Petro)$cluster <- clusters(graph = grafica_Petro)$membership
gcc <- induced_subgraph(graph = grafica_Petro, vids = which(V(grafica_Petro)$cluster == which.max(clusters(graph = grafica_Petro)$csize)))
set.seed(123)
plot(gcc, layout = layout_with_fr,
vertex.color = adjustcolor('darkolivegreen4', 0.1),
vertex.frame.color = 'darkolivegreen4',
vertex.size = 4 * strength(gcc),
vertex.label = NA)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1, size = 3)
plot(gcc, layout = layout_with_fr,
vertex.color = adjustcolor('darkolivegreen4', 0.1),
vertex.frame.color = 'darkolivegreen4',
vertex.size = 10 * strength(gcc),
vertex.label = NA)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 10, hjust = 1, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 10, hjust = 10, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 2, hjust = 2, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.5, hjust = 0.5, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.5, hjust = 1, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.5, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link(label_colour = "Green2", label_alpha = "1") +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link(aes(colour = autor), angle_calc = "along", linejoin = round, label_colour = "Green", label_alpha = 1) +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
View(grafica_Petro)
View(freq_bigrams)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link(aes(colour = grafica_Petro), angle_calc = "along", linejoin = round, label_colour = "Green", label_alpha = 1) +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link(angle_calc = "along", linejoin = "round", label_colour = "Green", label_alpha = 1) +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "fr") +
geom_edge_link(angle_calc = "along", label_dodge = unit(2.5, 'mm'), arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm'), linejoin = "round", label_colour = "Green", label_alpha = 1) +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "graphopt") +
geom_edge_link(angle_calc = "along", label_dodge = unit(2, 'mm'), arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm'), linejoin = "round", label_colour = "Green", label_alpha = 1) +
geom_node_point(size = 3) +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "graphopt") +
geom_edge_link(angle_calc = "along", label_dodge = unit(2, 'mm'), arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm'), linejoin = "round", label_colour = "Green", label_alpha = 1) +
geom_node_point(size = 1) +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "stress") +
geom_edge_link(angle_calc = "along", label_dodge = unit(2, 'mm'), arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm'), linejoin = "round", label_colour = "Green", label_alpha = 1) +
geom_node_point(size = 1) +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
ggraph(grafica_Petro, layout = "stress") +
geom_edge_link(angle_calc = "along", label_dodge = unit(2, 'mm'), arrow = arrow(length = unit(3, 'mm')), end_cap = circle(3, 'mm'), linejoin = "round", label_colour = "Green", label_alpha = 1) +
geom_node_point(size = 1) +
geom_node_text(aes(label = name), vjust = 0.7, hjust = 1.1, size = 2)
View(freq_bigrams)
petro_bigram <- freq_bigrams %>%
filter(autor == "Petro")
View(petro_bigram)
milei_bigram <- freq_bigrams %>%
filter(autor == "Milei")
View(milei_bigram)
milei_bigram <- freq_bigrams %>%
filter(autor == "Milei") %>%
filter(row_number()<=500)
petro_bigram <- freq_bigrams %>%
filter(autor == "Petro") %>%
filter(row_number()<=500)
View(milei_bigram)
View(petro_bigram)
df <- tibble(
id = 1:3,
texto = c(
"el desarrollo sostenible es importante",
"necesitamos datos abiertos para la sociedad",
"la sostenibilidad implica responsabilidad social"
)
)
# Bigramas de búsqueda
bigrams_busqueda <- c("desarrollo sostenible", "datos abiertos", "responsabilidad social")
# Procesar
resultado <- df %>%
# tokenizar en bigramas
unnest_tokens(bigrama, texto, token = "ngrams", n = 2) %>%
# marcar coincidencias
mutate(match = if_else(bigrama %in% bigrams_busqueda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado$match)
total_bigrams_busqueda <- length(bigrams_busqueda)
score <- total_matches / total_bigrams_busqueda
resultado
score
freq_bigrams_Cristina %>%
filter(autor == "Cristina") %>%
filter(row_number()<=500)
freq_bigrams_Cristina %>%
filter(autor == "Cristina") %>%
filter(row_number()<=500)
freq_bigrams_Cristina <- freq_bigrams %>%
filter(autor == "Cristina") %>%
filter(row_number()<=500)
xCristina <- freq_bigrams %>%
filter(autor == "Cristina") %>%
filter(row_number()<=500)
xPetro <- freq_bigrams %>%
filter(autor == "Petro") %>%
filter(row_number()<=500)
xMilei <- freq_bigrams %>%
filter(autor == "Milei") %>%
filter(row_number()<=500)
xFernandez <- freq_bigrams %>%
filter(autor == "Fernandez") %>%
filter(row_number()<=500)
xFernandez <- freq_bigrams %>%
filter(autor == "Santos") %>%
filter(row_number()<=500)
xFernandez <- freq_bigrams %>%
filter(autor == "Fernandez") %>%
filter(row_number()<=500)
xSantos <- freq_bigrams %>%
filter(autor == "Santos") %>%
filter(row_number()<=500)
xDuque <- freq_bigrams %>%
filter(autor == "Duque") %>%
filter(row_number()<=500)
xMacri <- freq_bigrams %>%
filter(autor == "Macri") %>%
filter(row_number()<=500)
bigrams_derecha <- c("eficiencia mercado", "libertad economica", "reduccion Estado", "libre mercado", "propiedad privada", "austeridad fiscal", "libre empresa", "Estado minimo", "privatizar empresas", "inversion extranjera", "reduccion impuestos", "estabilidad economica", "flexibilidad laboral")
# Bigramas de búsqueda
bigrams_izquierda <- c("desarrollo sostenible", "bienestar social", "desigualdad social", "inversión pública", "justicia social", "redistribucion riqueza", "Estado presente", "inclusion social", "Estado bienestar", "Derechos sociales", "Intervencion estatal", "seguridad economica", "interes publico", "fallas mercado", "soberanía económica", "gasto social")
# Bigramas de búsqueda
bigrams_izquierda <- c("desarrollo sostenible", "bienestar social", "desigualdad social", "inversión pública", "justicia social", "redistribucion riqueza", "Estado presente", "inclusion social", "Estado bienestar", "Derechos sociales", "Intervencion estatal", "seguridad economica", "interes publico", "fallas mercado", "soberanía económica", "gasto social")
bigrams_derecha <- c("eficiencia mercado", "libertad economica", "reduccion Estado", "libre mercado", "propiedad privada", "austeridad fiscal", "libre empresa", "Estado minimo", "privatizar empresas", "inversion extranjera", "reduccion impuestos", "estabilidad economica", "flexibilidad laboral")
View(xMacri)
resultado_macri <- df %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
resultado_macri <- xMacri %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado$match)
total_bigrams_busqueda <- length(bigrams_busqueda)
score <- total_matches / total_bigrams_busqueda
resultado_macri
score
count(resultado_macri$match)
sum(resultado_macri$match)
resultado_macri <- xMacri %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_macri$match)
total_bigrams_busqueda <- length(bigrams_busqueda)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_macri <- total_matches/total_bigrams_busqueda
score_macri_iz <- total_matches/total_bigrams_busqueda
resultado_macri <- xMacri %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_macri$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_macri_iz <- total_matches/total_bigrams_busqueda
score_macri_dr <- total_matches/total_bigrams_busqueda
rm(score_macri_iz)
resultado_petro <- xPetro %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_petro$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_petro_dr <- total_matches/total_bigrams_busqueda
resultado_petro <- xPetro %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_petro$match)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_petro_iz <- total_matches/total_bigrams_busqueda
resultado_milei <- xMilei %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_milei$match)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_milei_iz <- total_matches/total_bigrams_busqueda
resultado_milei <- xMilei %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_milei$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_milei_dr <- total_matches/total_bigrams_busqueda
resultado_santos <- xSantos %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_santos$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_santos_dr <- total_matches/total_bigrams_busqueda
resultado_santos <- xSantos %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_santos$match)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_santos_iz <- total_matches/total_bigrams_busqueda
resultado_duque <- xDuque %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_duque$match)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_duque_iz <- total_matches/total_bigrams_busqueda
resultado_duque <- xDuque %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_duque$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_duque_dr <- total_matches/total_bigrams_busqueda
resultado_Cristina <- xCristina %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_Cristina$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_cristina_dr <- total_matches/total_bigrams_busqueda
resultado_Cristina <- xCristina %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_Cristina$match)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_cristina_iz <- total_matches/total_bigrams_busqueda
resultado_Fernandez <- xFernandez %>%
mutate(match = if_else(bigram %in% bigrams_izquierda, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_Fernandez$match)
total_bigrams_busqueda <- length(bigrams_izquierda)
score_fernandez_iz <- total_matches/total_bigrams_busqueda
resultado_Fernandez <- xFernandez %>%
mutate(match = if_else(bigram %in% bigrams_derecha, 1, 0))
# Calcular métrica
total_matches <- sum(resultado_Fernandez$match)
total_bigrams_busqueda <- length(bigrams_derecha)
score_fernandez_dr <- total_matches/total_bigrams_busqueda
save.image("C:/Users/vaare/Downloads/textos/mineria.RData")
library(pacman)
p_load(pdftools, stringr, dplyr, tidytext, tidyverse, readr, purrr, stringi, tm, magrittr, ggplot2, wordcloud, gridExtra, RColorBrewer, topicmodels, forcats)
izq <- c(score_cristina_iz, score_duque_iz, score_fernandez_iz, score_macri, score_milei_iz, score_petro_iz, score_santos_iz)
der <- c(score_cristina_dr, score_duque_dr, score_fernandez_dr, score_macri_dr, score_milei_dr, score_petro_dr, score_santos_dr)
nom_presi <- c("Cristina", "Duque", "Fernandez", "Macri", "Milei", "Petro", "Santos")
dummy_tm <- tibble(nom_presi, izq, der)
View(dummy_tm)
write_excel_csv(dummy, "C:/Users/vaare/Downloads/textos/Data")
write_excel_csv(dummy_tm, "C:/Users/vaare/Downloads/textos/Data/dummy.xls")
